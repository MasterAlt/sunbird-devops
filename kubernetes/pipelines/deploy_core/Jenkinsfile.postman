@Library('deploy-conf') _
node() {
    try {
        String ANSI_GREEN = "\u001B[32m"
        String ANSI_NORMAL = "\u001B[0m"
        String ANSI_BOLD = "\u001B[1m"
        String ANSI_RED = "\u001B[31m"
        String ANSI_YELLOW = "\u001B[33m"
    ansiColor('xterm') {
        stage('checkout public repo') {
            folder = new File("$WORKSPACE/.git")
            if (folder.exists())
            {
               println "Found .git folder. Clearing it.."
               sh'git clean -fxd'
            }
            checkout scm
        }

        stage('deploy') {
            values = [:]
            jobName = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-1].trim().toLowerCase()
            currentWs = sh(returnStdout: true, script: 'pwd').trim()
            envDir = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-3].trim()
            module = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-2].trim()
            jobName = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-1].trim()

            dir("postmanRepo")
            {
                git branch: "${postman_repo_branch}",
                url: "${postman_repo_url}"
            }
            ansiblePlaybook = "$currentWs/kubernetes/ansible/postmantestcases.yml"
            ansibleExtraArgs = "--extra-vars \"postman_repo_location=${currentWs}/postmanRepo\" --vault-password-file /var/lib/jenkins/secrets/vault-pass -v"
            values.put('env', envDir)
            values.put('module', module)
            values.put('jobName', jobName)
            values.put('currentWs', currentWs)
            values.put('ansiblePlaybook', ansiblePlaybook)
            values.put('ansibleExtraArgs', ansibleExtraArgs)
            ansible_playbook_run(values)
            currentBuild.description = "Private: ${params.private_branch}, Public: ${params.branch_or_tag}"
        }

        stage('ArchiveArtifacts') {
            archiveArtifacts "postmanRepo/newman/*"
            currentBuild.description = "${build_tag}"
        }
}
    } catch (err) {
        currentBuild.result = "FAILURE"
        throw err
    }
}

