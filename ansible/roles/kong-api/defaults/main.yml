
---
kong_admin_api_url: "http://{{kong_host}}:8001"

# Default statsd_metrics
statsd_metrics: ["request_count", "status_count", "latency", "upstream_latency", "request_size", "response_size"]
statsd_host: statsd-service
statsd_port: 9125

statsd_pulgin:
  name: statsd
  config.metrics: "{{ statsd_metrics }}"
  config.host: "{{ statsd_host }}"
  config.port: "{{ statsd_port }}"

# Default Rate limits
small_rate_limit_per_hour: 100
medium_rate_limit_per_hour: 5000
x_medium_rate_limit_per_hour: 5000
large_rate_limit_per_hour: 10000
x2_large_rate_limit_per_hour: 15000
x_large_rate_limit_per_hour: 30000

premium_consumer_small_rate_limit_per_hour: 1000
premium_consumer_medium_rate_limit_per_hour: 10000
premium_consumer_large_rate_limit_per_hour: 100000

# Default max request size in MB
small_request_size_limit: 1
medium_request_size_limit: 10
large_request_size_limit: 100

# Default service prefixes
private_content_prefix: /private/content
content_prefix: /content
course_service_prefix: /course
itemset_prefix: /itemset
user_service_prefix: /user
data_service_prefix: /data
notes_service_prefix: /notes
org_service_prefix: /org
echo_service_prefix: /echo
composite_service_prefix: /composite
api_manager_perfix: /api-manager
meta_service_prefix: /meta
dashboard_service_prefix: /dashboard
announcement_service_prefix: /announcement
dialcode_service_prefix: /dialcode
channel_service_prefix: /channel
framework_service_prefix: /framework
badge_service_prefix: /badging
plugin_service_prefix: /plugins
config_service_prefix: /config
textbook_service_prefix: /textbook
lock_service_prefix: /lock
otp_service_prefix: /otp
sso_service_prefix: /sso
cert_service_prefix: /cert
cert_registry_service_prefix: /certreg
desktop_app_prefix: /desktop
license_api_prefix: /license

# Service URLs
knowledge_mw_service_url: "http://knowledge-mw-service:5000"
learning_service_url: "http://learner-service:9000"
vm_learning_service_url: "http://{{learningservice_ip}}:8080/learning-service"
telemetry_service_url: "http://telemetry-service:9001"
player_service_url: "http://player:3000"
echo_service_url: "http://echo:9595"
am_util_url: "http://adminutil:4000"
config_service_url: "http://config-service:8080"
lms_service_url: "http://lms-service:9000"
cert_service_url: "http://cert-service:9000"
cert_registry_service_url: "http://cert-registry-service:9000"
content_service_url: "http://content-service:9000"

premium_consumer_rate_limits:
  - api: createContent
    config.hour: "{{ premium_consumer_small_rate_limit_per_hour }}"
    config.limit_by: credential
    config.policy: local
  - api: updateContent
    config.hour: "{{ premium_consumer_medium_rate_limit_per_hour }}"
    config.limit_by: credential
    config.policy: local
  - api: readContent
    config.hour: "{{ premium_consumer_large_rate_limit_per_hour }}"
    config.limit_by: credential
    config.policy: local

kong_apis:

# acceptContentFlag API DESCRIPTION: Accept the flagged content - via KMS
  - name: acceptContentFlag
    request_path: "{{ content_prefix }}/v1/flag/accept"
    upstream_url: "{{ knowledge_mw_service_url }}/v1/content/flag/accept"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['contentAdmin']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# acceptTermsAndCondition API DESCRIPTION: used to accent the terms and conditions
  - name: acceptTermsAndCondition
    request_path: "{{ user_service_prefix }}/v1/tnc/accept"
    upstream_url: "{{ learning_service_url }}/v1/user/tnc/accept"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['appAccess']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# addBadgeToUser API DESCRIPTION: used to add badges to the issuer
  - name: addBadgeToUser
    request_path: "{{ user_service_prefix }}/v1/badges/add"
    upstream_url: "{{ learning_service_url }}/v1/user/badges/add"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['badgeCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# addMember API DESCRIPTION: used to add member to an organisation
  - name: addMember
    request_path: "{{ org_service_prefix }}/v1/member/add"
    upstream_url: "{{ learning_service_url }}/v1/org/member/add"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['orgAdmin']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# addRegCertificate API DESCRIPTION: used to generate the certificate for the batch
  - name: addRegCertificate
    request_path: "{{ cert_registry_service_prefix }}/v1/certs/add"
    upstream_url: "{{ cert_registry_service_url }}/certs/v1/registry/add"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['certificateCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# addSystemSettings API DESCRIPTION: used to create system settings
  - name: addSystemSettings
    request_path: "{{ data_service_prefix }}/v1/system/settings/set"
    upstream_url: "{{ learning_service_url }}/v1/system/settings/set"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['appCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# addUserSkill API DESCRIPTION: used to add a skill
  - name: addUserSkill
    request_path: "{{ user_service_prefix }}/v1/skill/add"
    upstream_url: "{{ learning_service_url }}/v1/user/skill/add"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['userCreate ']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# addUserSkillEndorsement API DESCRIPTION: endorse skills for the user
  - name: addUserSkillEndorsement
    request_path: "{{ user_service_prefix }}/v1/skill/endorse/add"
    upstream_url: "{{ learning_service_url }}/v1/user/skill/endorse/add"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['userCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# addUserToBatch API DESCRIPTION: Add Users to invite-only batch for a course
  - name: addUserToBatch
    request_path: "{{ course_service_prefix }}/v1/batch/user/add"
    upstream_url: "{{ lms_service_url }}/v1/course/batch/users/add"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['courseCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# assemblePage API DESCRIPTION: Fetches the data for entire page - fllter to page section
  - name: assemblePage
    request_path: "{{ data_service_prefix }}/v1/page/assemble"
    upstream_url: "{{ lms_service_url }}/v1/page/assemble"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['NOACL']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# assignRole API DESCRIPTION: used to assign roles to user
  - name: assignRole
    request_path: "{{ user_service_prefix }}/v1/role/assign"
    upstream_url: "{{ learning_service_url }}/v1/user/assign/role"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['userAdmin']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ large_request_size_limit }}"

# batchBulkEnrolment API DESCRIPTION: enroll all users provided in the csv
  - name: batchBulkEnrolment
    request_path: "{{ course_service_prefix }}/v1/batch/bulk/enrollment"
    upstream_url: "{{ lms_service_url }}/v1/batch/bulk/enrollment"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['courseSuperAdmin']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# batchBulkUnEnrolment API DESCRIPTION: to unenroll more than one user from a batch
  - name: batchBulkUnEnrolment
    request_path: "{{ course_service_prefix }}/v1/batch/bulk/unenrollment"
    upstream_url: "{{ lms_service_url }}/v1/batch/bulk/unenrollment"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['courseSuperAdmin']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# blockUser API DESCRIPTION: used to block the user
  - name: blockUser
    request_path: "{{ user_service_prefix }}/v1/block"
    upstream_url: "{{ learning_service_url }}/v1/user/block"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['userAdmin']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# checkUploadJobStatus API DESCRIPTION: used to check the uploaded bulk user/org creation status
  - name: checkUploadJobStatus
    request_path: "{{ data_service_prefix }}/v1/upload/status"
    upstream_url: "{{ learning_service_url }}/v1/upload/status"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['orgSuperAdmin--userSuperAdmin']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# compositeSearch API DESCRIPTION: Search service API
  - name: compositeSearch
    request_path: "{{ composite_service_prefix }}/v1/search"
    upstream_url: "{{ knowledge_mw_service_url }}/v1/search"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['contentAdmin--contentTempAccess']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# contentBadgeLink API DESCRIPTION: to associate badge information for a given content
  - name: contentBadgeLink
    request_path: "{{ badge_service_prefix }}/v1/content/link"
    upstream_url: "{{ lms_service_url }}/v1/content/link"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['badgeUpdate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# contentBadgeUnLink API DESCRIPTION: to remove a badge from a content
  - name: contentBadgeUnLink
    request_path: "{{ badge_service_prefix }}/v1/content/unlink"
    upstream_url: "{{ lms_service_url }}/v1/content/unlink"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['badgeAdmin']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# copyContent API DESCRIPTION: makes a copy of a content along with artefacts
  - name: copyContent
    request_path: "{{ content_prefix }}/v1/copy"
    upstream_url: "{{ knowledge_mw_service_url }}/v1/content/copy"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['contentCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# copyFramework API DESCRIPTION: Copies an existing framework(taxonomy)
  - name: copyFramework
    request_path: "{{ framework_service_prefix }}/v1/copy"
    upstream_url: "{{ knowledge_mw_service_url }}/v1/framework/copy"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['frameworkCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# courseBatchAddCertificateTemplate API DESCRIPTION: Adds certificate template to a course batch
  - name: courseBatchAddCertificateTemplate
    request_path: "{{ course_service_prefix }}/batch/cert/v1/template/add"
    upstream_url: "{{ lms_service_url }}/v1/course/batch/cert/template/add"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['certificateCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# courseBatchRemoveCertificateTemplate API DESCRIPTION: to remove a certificate template from course batch
  - name: courseBatchRemoveCertificateTemplate
    request_path: "{{ course_service_prefix }}/batch/cert/v1/template/remove"
    upstream_url: "{{ lms_service_url }}/v1/course/batch/cert/template/remove"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['courseAdmin']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# courseEnrolment API DESCRIPTION: Enroll user to an open batch
  - name: courseEnrolment
    request_path: "{{ course_service_prefix }}/v1/enrol"
    upstream_url: "{{ lms_service_url }}/v1/course/enroll"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['courseAccess']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# courseIssueCertificate API DESCRIPTION: Issue certificate for all users of a batch
  - name: courseIssueCertificate
    request_path: "{{ course_service_prefix }}/batch/cert/v1/issue"
    upstream_url: "{{ lms_service_url }}/v1/course/batch/cert/issue"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['certificateCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# courseUnEnrolment API DESCRIPTION: To unenroll the user from an open batch
  - name: courseUnEnrolment
    request_path: "{{ course_service_prefix }}/v1/unenrol"
    upstream_url: "{{ lms_service_url }}/v1/course/unenroll"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['courseAccess']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createAssertion API DESCRIPTION: used to assign badge
  - name: createAssertion
    request_path: "{{ badge_service_prefix }}/v1/issuer/badge/assertion/create"
    upstream_url: "{{ learning_service_url }}/v1/issuer/badge/assertion/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['badgeCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createBadgeClass API DESCRIPTION: used to craete a new badge
  - name: createBadgeClass
    request_path: "{{ badge_service_prefix }}/v1/issuer/badge/create"
    upstream_url: "{{ learning_service_url }}/v1/issuer/badge/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['badgeCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createBatch API DESCRIPTION: create a course batch
  - name: createBatch
    request_path: "{{ course_service_prefix }}/v1/batch/create"
    upstream_url: "{{ lms_service_url }}/v1/course/batch/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['courseCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createCertTemplate API DESCRIPTION: creates a certificate template
  - name: createCertTemplate
    request_path: "{{ cert_service_prefix }}/v1/template/create"
    upstream_url: "{{ cert_service_url }}/cert/v1/template/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['certificateCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createChannel API DESCRIPTION: create channel 
  - name: createChannel
    request_path: "{{ channel_service_prefix }}/v1/create"
    upstream_url: "{{ knowledge_mw_service_url }}/v1/channel/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['channelCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createContent API DESCRIPTION: Content create api with authentication
  - name: createContent
    request_path: "{{ content_prefix }}/v1/create"
    upstream_url: "{{ knowledge_mw_service_url }}/v1/content/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['contentCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createCourse API DESCRIPTION: Create API to create a course
  - name: createCourse
    request_path: "{{ course_service_prefix }}/v1/create"
    upstream_url: "{{ knowledge_mw_service_url }}/v1/course/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['courseCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createData API DESCRIPTION: used for sunbird plugin to create announcement related data
  - name: createData
    request_path: "{{ data_service_prefix }}/v1/object/create"
    upstream_url: "{{ learning_service_url }}/v1/object/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['objectCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createForm API DESCRIPTION: used to create form
  - name: createForm
    request_path: "{{ data_service_prefix }}/v1/form/create"
    upstream_url: "{{ player_service_url }}/plugin/v1/form/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['formCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createFramework API DESCRIPTION: creates a framework
  - name: createFramework
    request_path: "{{ framework_service_prefix }}/v1/create"
    upstream_url: "{{ knowledge_mw_service_url }}/v1/framework/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['frameworkCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createFrameworkCategory API DESCRIPTION: creates framework category
  - name: createFrameworkCategory
    request_path: "{{ framework_service_prefix }}/v1/category/create"
    upstream_url: "{{ knowledge_mw_service_url }}/v1/framework/category/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['frameworkCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createFrameworkTerm API DESCRIPTION: Creates a framework term
  - name: createFrameworkTerm
    request_path: "{{ framework_service_prefix }}/v1/term/create"
    upstream_url: "{{ knowledge_mw_service_url }}/v1/framework/term/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['frameworkCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createissuer API DESCRIPTION: used to create an issuer for the badge class.
  - name: createissuer
    request_path: "{{ badge_service_prefix }}/v1/issuer/create"
    upstream_url: "{{ learning_service_url }}/v1/issuer/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['badgeCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createLocation API DESCRIPTION: used to create geo location for an organization
  - name: createLocation
    request_path: "{{ org_service_prefix }}/v1/location/create"
    upstream_url: "{{ learning_service_url }}/v1/notification/location/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['locationCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createLock API DESCRIPTION: used to create a lock to content edition
  - name: createLock
    request_path: "{{ lock_service_prefix }}/v1/create"
    upstream_url: "{{ knowledge_mw_service_url }}/v1/lock/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['contentCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createNote API DESCRIPTION: used to create a note realeted to course/self
  - name: createNote
    request_path: "{{ notes_service_prefix }}/v1/create"
    upstream_url: "{{ learning_service_url }}/v1/note/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['noteCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createOrg API DESCRIPTION: used to create an org
  - name: createOrg
    request_path: "{{ org_service_prefix }}/v1/create"
    upstream_url: "{{ learning_service_url }}/v1/org/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['orgCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createOrgType API DESCRIPTION: used to create the type of organisation like [NGO/Government]
  - name: createOrgType
    request_path: "{{ org_service_prefix }}/v1/type/create"
    upstream_url: "{{ learning_service_url }}/v1/org/type/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['orgCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createPage API DESCRIPTION: To create a page object which contains sections for fetching content.
  - name: createPage
    request_path: "{{ data_service_prefix }}/v1/page/create"
    upstream_url: "{{ lms_service_url }}/v1/page/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['pageCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createPageSection API DESCRIPTION: Create API page section in the UI like resources, helpul for search purpose
  - name: createPageSection
    request_path: "{{ data_service_prefix }}/v1/page/section/create"
    upstream_url: "{{ lms_service_url }}/v1/page/section/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['pageCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createPublisher API DESCRIPTION: used to create dialcode publisher details, used by implementation team
  - name: createPublisher
    request_path: "{{ dialcode_service_prefix }}/v1/publisher/create"
    upstream_url: "{{ knowledge_mw_service_url }}/v1/dialcode/publisher/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['dialcodeCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createSession API DESCRIPTION: used to create sso session
  - name: createSession
    request_path: "{{ sso_service_prefix }}/v1/create/session"
    upstream_url: "{{ player_service_url }}/v1/sso/create/session"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['ssoAdmin']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createUser API DESCRIPTION: used to create user
  - name: createUser
    request_path: "{{ user_service_prefix }}/v1/create"
    upstream_url: "{{ learning_service_url }}/v1/user/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['userCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createUserLearnerV3 API DESCRIPTION: used to create a user in custodian org.
  - name: createUserLearnerV3
    request_path: "{{ user_service_prefix }}/v1/signup"
    upstream_url: "{{ learning_service_url }}/v1/user/signup"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['userCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createUserVersion2 API DESCRIPTION: used to create user with optional username
  - name: createUserVersion2
    request_path: "{{ user_service_prefix }}/v2/create"
    upstream_url: "{{ learning_service_url }}/v2/user/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['userCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# createUserVersion3 API DESCRIPTION: API will return response after getting sync with ES.
  - name: createUserVersion3
    request_path: "/api/user/v3/create"
    upstream_url: "{{ learning_service_url }}/v3/user/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['userCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# deleteBadgeClass API DESCRIPTION: used to delete badge
  - name: deleteBadgeClass
    request_path: "{{ badge_service_prefix }}/v1/issuer/badge/delete"
    upstream_url: "{{ learning_service_url }}/v1/issuer/badge/delete"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['badgeAdmin']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# deleteData API DESCRIPTION: used for sunbird plugin to delete announcement related data
  - name: deleteData
    request_path: "{{ data_service_prefix }}/v1/object/delete"
    upstream_url: "{{ learning_service_url }}/v1/object/delete"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['objectAdmin']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# deleteIssuer API DESCRIPTION: used to delete the issuers
  - name: deleteIssuer
    request_path: "{{ badge_service_prefix }}/v1/issuer/delete"
    upstream_url: "{{ learning_service_url }}/v1/issuer/delete"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['badgeAdmin']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# deleteLocation API DESCRIPTION: deletes the created location for topic based push notification
  - name: deleteLocation
    request_path: "{{ org_service_prefix }}/v1/location/delete"
    upstream_url: "{{ learning_service_url }}/v1/notification/location/delete"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['locationAdmin']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# deleteNote API DESCRIPTION: used to delete a note
  - name: deleteNote
    request_path: "{{ notes_service_prefix }}/v1/delete"
    upstream_url: "{{ learning_service_url }}/v1/note/delete"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['noteAdmin']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# deviceProfile API DESCRIPTION: used to get the location of user declartion and IP reloved loaction
  - name: deviceProfile
    request_path: "/v3/device/profile"
    upstream_url: "http://11.2.4.21:9000/v1/device/profile"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['deviceCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# deviceRegister API DESCRIPTION: used to add the location information with the device registration
  - name: deviceRegister
    request_path: "/v3/device/register"
    upstream_url: "http://11.2.4.21:9000/v1/device/register"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['deviceCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# dialAssemble API DESCRIPTION: like a filter to page section
  - name: dialAssemble
    request_path: "{{ data_service_prefix }}/v1/dial/assemble"
    upstream_url: "{{ lms_service_url }}/v1/page/assemble"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['NOACL']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# downloadCertificate API DESCRIPTION: download the certificate specifically for mobile devices
  - name: downloadCertificate
    request_path: "/v1/user/certs/download"
    upstream_url: "{{ lms_service_url }}/v1/user/certs/download"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['certificateAccess']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# downloadRegCertificate API DESCRIPTION: download the certificate
  - name: downloadRegCertificate
    request_path: "{{ cert_registry_service_prefix }}/v1/certs/download"
    upstream_url: "{{ cert_registry_service_url }}/certs/v1/registry/download"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['certificateAccess ']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# downloadTOC API DESCRIPTION: used to download table of content for the text book
  - name: downloadTOC
    request_path: "{{ textbook_service_prefix }}/v1/toc/download"
    upstream_url: "{{ lms_service_url }}/v1/textbook/toc/download"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['contentAccess']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_large_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# echo API DESCRIPTION: used in sso authentication
  - name: echo
    request_path: "{{ echo_service_prefix }}"
    upstream_url: "{{ echo_service_url }}"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['ssoCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# experimentcreate API DESCRIPTION: used to create an expirement
  - name: experimentcreate
    request_path: "{{ data_service_prefix }}/v1/experiement/create"
    upstream_url: "http://11.2.4.21:9000/experiment/create"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['experimentCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# experimentread API DESCRIPTION: used to read the expiriment created
  - name: experimentread
    request_path: "{{ data_service_prefix }}/v1/experiement/get"
    upstream_url: "http://11.2.4.21:9000/experiment/get"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['expirementAccess']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# fetchURLMetaInformation API DESCRIPTION: to fetch the metadata of a given URL
  - name: fetchURLMetaInformation
    request_path: "{{ content_prefix }}/v1/fetchmeta"
    upstream_url: "{{ knowledge_mw_service_url }}/v1/url/fetchmeta"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['appAccess']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_large_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# flagContent API DESCRIPTION: Flag an inappropriate content
  - name: flagContent
    request_path: "{{ content_prefix }}/v1/flag"
    upstream_url: "{{ knowledge_mw_service_url }}/v1/content/flag"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['contentAccess']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# freshDesk API DESCRIPTION: used to raise tickets from offline desktop
  - name: freshDesk
    request_path: "/tickets/v1/create"
    upstream_url: "http://dummy.freshDesk.url/api/v2/tickets"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['appAccess']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# generateCertificate API DESCRIPTION: used to generate certificate
  - name: generateCertificate
    request_path: "{{ cert_service_prefix }}/v1/certs/generate"
    upstream_url: "{{ cert_service_url }}/v1/certs/generate"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['certificateCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# generateDialcodes API DESCRIPTION: Create dialcodes API
  - name: generateDialcodes
    request_path: "{{ dialcode_service_prefix }}/v1/generate"
    upstream_url: "{{ knowledge_mw_service_url }}/v1/dialcode/generate"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['dialcodeCreate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# generateOtp API DESCRIPTION: used to generate an OTP
  - name: generateOtp
    request_path: "{{ otp_service_prefix }}/v1/generate"
    upstream_url: "{{ learning_service_url }}/v1/otp/generate"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['userAccess']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# getAllData API DESCRIPTION: used for sunbird plugin to get list announcement related data
  - name: getAllData
    request_path: "{{ data_service_prefix }}/v1/object/read/list"
    upstream_url: "{{ learning_service_url }}/v1/object/read/list"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['objectAccess']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# getAllIssuer API DESCRIPTION: used to list the availble issuers
  - name: getAllIssuer
    request_path: "{{ badge_service_prefix }}/v1/issuer/list"
    upstream_url: "{{ learning_service_url }}/v1/issuer/list"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['badgeAccess']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# getAssertion API DESCRIPTION: used to get the assertion details base on assertion ID
  - name: getAssertion
    request_path: "{{ badge_service_prefix }}/v1/issuer/badge/assertion/read"
    upstream_url: "{{ learning_service_url }}/v1/issuer/badge/assertion/read"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['badgeAccess']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ medium_request_size_limit }}"

# getAssertionList API DESCRIPTION: used to search badge
  - name: getAssertionList
    request_path: "{{ badge_service_prefix }}/v1/issuer/badge/assertion/search"
    upstream_url: "{{ learning_service_url }}/v1/issuer/badge/assertion/search"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['badgeAccess']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ medium_request_size_limit }}"

# getAudienceCount API DESCRIPTION: user count for receiving announcement
  - name: getAudienceCount
    request_path: "{{ data_service_prefix }}/v1/notification/audience"
    upstream_url: "{{ learning_service_url }}/v1/notification/audience"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['announcementAccess']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# getBadgeClass API DESCRIPTION: get the badge details based on the badge ID
  - name: getBadgeClass
    request_path: "{{ badge_service_prefix }}/v1/issuer/badge/read"
    upstream_url: "{{ learning_service_url }}/v1/issuer/badge/read"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['badgeAccess']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# getBatch API DESCRIPTION: read course batch details
  - name: getBatch
    request_path: "{{ course_service_prefix }}/v1/batch/read"
    upstream_url: "{{ lms_service_url }}/v1/course/batch/read"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['courseAccess']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"

# getContentUploadUrl API DESCRIPTION: used to upload content like pdf jpeg, mp4 in browse
  - name: getContentUploadUrl
    request_path: "{{ content_prefix }}/v1/upload/url/read"
    upstream_url: "{{ knowledge_mw_service_url }}/v1/content/upload/url"
    strip_request_path: true
    plugins:
    - name: jwt
    - name: cors
    - "{ statsd_pulgin }"
    - name: acl
      config.whitelist: "['contentUpdate']"
    - name: rate-limiting
      config.policy: local
      config.hour: "{{ x_medium_rate_limit_per_hour }}"
      config.limit_by: credential
    - name: request-size-limiting
      config.allowed_payload_size: "{{ small_request_size_limit }}"
